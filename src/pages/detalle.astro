---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <h1 class="text-4xl font-bold mb-8 text-gray-900 text-center">Detalle de Producción por Empleado</h1>

  <!-- Filtro de empleado y fechas para detalle -->
  <div class="bg-white p-8 rounded-3xl shadow-2xl max-w-lg mx-auto">
    <h2 class="text-2xl font-semibold mb-6 text-gray-800 text-center">Generar Detalle</h2>
    <div class="space-y-4">
      <div>
        <label for="empleadoDetalle" class="block text-sm font-medium text-gray-700">Empleado</label>
        <select id="empleadoDetalle" class="mt-1 w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" required>
          <option value="">Seleccione un empleado</option>
        </select>
      </div>
      <div class="flex items-center gap-2">
        <label for="fechaInicioDetalle" class="text-sm font-medium text-gray-700">Fecha Inicio:</label>
        <input type="date" id="fechaInicioDetalle" class="px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm" required />
      </div>
      <div class="flex items-center gap-2">
        <label for="fechaFinDetalle" class="text-sm font-medium text-gray-700">Fecha Fin:</label>
        <input type="date" id="fechaFinDetalle" class="px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm" required />
      </div>
      <button id="btnGenerarDetalle" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition text-sm font-medium shadow-md hover:shadow-lg">
        Generar Detalle
      </button>
    </div>
  </div>

  <!-- Lista de detalle con paginación -->
  <div class="bg-white p-8 rounded-2xl shadow-2xl max-w-3xl mx-auto mt-8">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-2xl font-semibold text-gray-800">Detalle de Producciones</h2>
      <div class="flex items-center gap-2">
        <span class="text-sm text-gray-600" id="paginationInfoDetalle">Mostrando 0-0 de 0</span>
        <select id="itemsPerPageDetalle" class="px-2 py-1 border border-gray-300 rounded text-sm">
          <option value="5">5 por página</option>
          <option value="10" selected>10 por página</option>
          <option value="20">20 por página</option>
        </select>
      </div>
    </div>
    
    <div id="listaDetalle" class="space-y-4 min-h-64"></div>
    
    <!-- Total general -->
    <div class="mt-6 text-right">
      <p class="text-lg font-semibold text-gray-800">Total a Pagar: <span id="totalGeneralDetalle">$0 COP</span></p>
    </div>
    
    <!-- Botón para descargar PDF -->
    <div class="mt-6 flex justify-end">
      <button id="btnDescargarPDF" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-medium flex items-center gap-2 shadow-md hover:shadow-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
        </svg>
        Descargar Recibo (PDF)
      </button>
    </div>
    
    <!-- Controles de paginación -->
    <div class="flex justify-between items-center mt-6">
      <div class="text-sm text-gray-600" id="totalInfoDetalle">Total: 0 registros</div>
      <div class="flex items-center gap-2">
        <button id="btnAnteriorDetalle" class="px-3 py-1.5 border border-gray-300 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <div id="paginationControlsDetalle" class="flex items-center gap-1"></div>
        <button id="btnSiguienteDetalle" class="px-3 py-1.5 border border-gray-300 rounded bg-white text-gray-700 hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Modal mejorado -->
  <div id="modalGeneralDetalle" class="fixed inset-0 flex items-center justify-center hidden bg-transparent bg-opacity-30 backdrop-blur-sm transition-all duration-300 z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm mx-4 transform transition-all duration-300">
      <h3 class="text-lg font-semibold text-gray-800 mb-4" id="modalTituloDetalle"></h3>
      <p id="modalMensajeDetalle" class="mb-6 text-gray-600"></p>
      <div class="flex justify-end gap-3">
        <button id="btnCancelarModalDetalle" class="py-2 px-4 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition hidden">Cancelar</button>
        <button id="btnConfirmarModalDetalle" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition">Aceptar</button>
      </div>
    </div>
  </div>

  <!-- Importar las bibliotecas necesarias -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

  <script>
    // Variables globales
    let empleados = [];
    let producciones = [];
    let operaciones = [];
    let detalle = [];
    let paginaActual = 1;
    let itemsPorPagina = 10;
    
    const empleadoSelect = document.getElementById('empleadoDetalle');
    const fechaInicioDetalle = document.getElementById('fechaInicioDetalle');
    const fechaFinDetalle = document.getElementById('fechaFinDetalle');
    const listaDetalle = document.getElementById('listaDetalle');
    const modalGeneralDetalle = document.getElementById('modalGeneralDetalle');
    const modalTituloDetalle = document.getElementById('modalTituloDetalle');
    const modalMensajeDetalle = document.getElementById('modalMensajeDetalle');
    const btnConfirmarModalDetalle = document.getElementById('btnConfirmarModalDetalle');
    const btnCancelarModalDetalle = document.getElementById('btnCancelarModalDetalle');
    const btnGenerarDetalle = document.getElementById('btnGenerarDetalle');
    const btnDescargarPDF = document.getElementById('btnDescargarPDF');
    const btnAnteriorDetalle = document.getElementById('btnAnteriorDetalle');
    const btnSiguienteDetalle = document.getElementById('btnSiguienteDetalle');
    const paginationControlsDetalle = document.getElementById('paginationControlsDetalle');
    const paginationInfoDetalle = document.getElementById('paginationInfoDetalle');
    const totalInfoDetalle = document.getElementById('totalInfoDetalle');
    const totalGeneralDetalle = document.getElementById('totalGeneralDetalle');
    const itemsPerPageDetalle = document.getElementById('itemsPerPageDetalle');
    
    // Cargar datos desde localStorage
    function cargarDatos() {
      empleados = JSON.parse(localStorage.getItem('empleados')) || [];
      producciones = JSON.parse(localStorage.getItem('producciones')) || [];
      operaciones = JSON.parse(localStorage.getItem('operaciones')) || [];
    }

    function cargarEmpleadosDisponibles() {
      empleados.forEach(emp => {
        const option = document.createElement('option');
        option.value = emp.nombre;
        option.textContent = `${emp.nombre} - ${emp.cargo} (Doc: ${emp.documento})`;
        empleadoSelect.appendChild(option);
      });
    }

    function mostrarModalDetalle(titulo, mensaje, confirmar = false, onConfirm = null) {
      modalTituloDetalle.textContent = titulo;
      modalMensajeDetalle.textContent = mensaje;
      
      if (confirmar) {
        btnCancelarModalDetalle.classList.remove('hidden');
        btnConfirmarModalDetalle.textContent = 'Confirmar';
        
        const antiguoConfirm = btnConfirmarModalDetalle.onclick;
        btnConfirmarModalDetalle.onclick = () => {
          if (onConfirm) onConfirm();
          ocultarModalDetalle();
          btnConfirmarModalDetalle.onclick = antiguoConfirm;
        };
      } else {
        btnCancelarModalDetalle.classList.add('hidden');
        btnConfirmarModalDetalle.textContent = 'Aceptar';
        btnConfirmarModalDetalle.onclick = ocultarModalDetalle;
      }
      
      modalGeneralDetalle.classList.remove('hidden');
    }

    function ocultarModalDetalle() {
      modalGeneralDetalle.classList.add('hidden');
    }

    // Función para formatear fechas manualmente desde YYYY-MM-DD a DD/MM/YYYY
    function formatearFecha(fechaISO) {
      const [year, month, day] = fechaISO.split('-');
      return `${day}/${month}/${year}`;
    }

    // Función para actualizar los controles de paginación
    function actualizarPaginacionDetalle() {
      const totalPaginas = Math.ceil(detalle.length / itemsPorPagina);
      
      const inicio = (paginaActual - 1) * itemsPorPagina + 1;
      const fin = Math.min(paginaActual * itemsPorPagina, detalle.length);
      paginationInfoDetalle.textContent = `Mostrando ${detalle.length > 0 ? inicio : 0}-${fin} de ${detalle.length}`;
      totalInfoDetalle.textContent = `Total: ${detalle.length} registro${detalle.length !== 1 ? 's' : ''}`;
      
      btnAnteriorDetalle.disabled = paginaActual <= 1;
      btnSiguienteDetalle.disabled = paginaActual >= totalPaginas;
      
      paginationControlsDetalle.innerHTML = '';
      
      const maxPagesToShow = 5;
      let startPage = Math.max(1, paginaActual - Math.floor(maxPagesToShow / 2));
      let endPage = Math.min(totalPaginas, startPage + maxPagesToShow - 1);
      
      if (endPage - startPage + 1 < maxPagesToShow && startPage > 1) {
        startPage = Math.max(1, endPage - maxPagesToShow + 1);
      }
      
      if (startPage > 1) {
        const btnFirstPage = document.createElement('button');
        btnFirstPage.className = 'px-3 py-1.5 border border-gray-300 rounded hover:bg-gray-100';
        btnFirstPage.textContent = '1';
        btnFirstPage.addEventListener('click', () => cambiarPaginaDetalle(1));
        paginationControlsDetalle.appendChild(btnFirstPage);
        
        if (startPage > 2) {
          const elipsis = document.createElement('span');
          elipsis.className = 'px-1';
          elipsis.textContent = '...';
          paginationControlsDetalle.appendChild(elipsis);
        }
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const btnPage = document.createElement('button');
        btnPage.className = `px-3 py-1.5 border rounded ${i === paginaActual ? 'bg-blue-600 text-white' : 'border-gray-300 hover:bg-gray-100'}`;
        btnPage.textContent = i;
        btnPage.addEventListener('click', () => cambiarPaginaDetalle(i));
        paginationControlsDetalle.appendChild(btnPage);
      }
      
      if (endPage < totalPaginas) {
        if (endPage < totalPaginas - 1) {
          const elipsis = document.createElement('span');
          elipsis.className = 'px-1';
          elipsis.textContent = '...';
          paginationControlsDetalle.appendChild(elipsis);
        }
        
        const btnLastPage = document.createElement('button');
        btnLastPage.className = 'px-3 py-1.5 border border-gray-300 rounded hover:bg-gray-100';
        btnLastPage.textContent = totalPaginas;
        btnLastPage.addEventListener('click', () => cambiarPaginaDetalle(totalPaginas));
        paginationControlsDetalle.appendChild(btnLastPage);
      }
    }
    
    function cambiarPaginaDetalle(pagina) {
      paginaActual = pagina;
      generarDetalle();
    }

    function generarDetalle() {
      const empleado = empleadoSelect.value;
      const fechaInicio = fechaInicioDetalle.value;
      const fechaFin = fechaFinDetalle.value;

      if (!empleado || !fechaInicio || !fechaFin) {
        mostrarModalDetalle('Error', 'Por favor, selecciona un empleado y un rango de fechas.');
        return;
      }

      cargarDatos();

      // Filtrar producciones por empleado y rango de fechas
      const produccionesFiltradas = producciones.filter(prod => {
        return prod.empleado === empleado && prod.fecha >= fechaInicio && prod.fecha <= fechaFin;
      });

      if (produccionesFiltradas.length === 0) {
        listaDetalle.innerHTML = '<p class="text-center text-gray-500 py-4">No hay producciones para este empleado en el rango de fechas seleccionado.</p>';
        totalGeneralDetalle.textContent = '$0 COP';
        detalle = [];
        actualizarPaginacionDetalle();
        return;
      }

      // Crear lista de detalle
      detalle = produccionesFiltradas.map(prod => {
        const operacion = operaciones.find(op => op.nombreOperacion === prod.operacion) || { valorOperacion: 0, nombreOperacion: 'No encontrada' };
        const totalGanado = prod.cantidad * operacion.valorOperacion;
        const fechaFormateada = formatearFecha(prod.fecha);
        return {
          fecha: fechaFormateada,
          operacion: prod.operacion,
          cantidad: prod.cantidad,
          valorOperacion: operacion.valorOperacion,
          totalGanado: totalGanado
        };
      });

      // Ordenar por fecha
      detalle.sort((a, b) => {
        const fechaA = a.fecha.split('/').reverse().join('-');
        const fechaB = b.fecha.split('/').reverse().join('-');
        return fechaA.localeCompare(fechaB);
      });

      // Actualizar la lista
      actualizarPaginacionDetalle();
      if (detalle.length === 0) {
        listaDetalle.innerHTML = '<p class="text-center text-gray-500 py-4">No hay detalles para mostrar.</p>';
        totalGeneralDetalle.textContent = '$0 COP';
        return;
      }

      listaDetalle.innerHTML = '';
      const inicio = (paginaActual - 1) * itemsPorPagina;
      const fin = Math.min(inicio + itemsPorPagina, detalle.length);
      const detallePagina = detalle.slice(inicio, fin);

      detallePagina.forEach((item) => {
        const operacion = operaciones.find(op => op.nombreOperacion === item.operacion) || { nombreOperacion: 'No encontrada', valorOperacion: 0 };
        const detalleItem = document.createElement('div');
        detalleItem.className = 'flex justify-between items-center p-4 border border-gray-200 rounded-lg hover:shadow-md transition';
        detalleItem.innerHTML = `
          <div>
            <p class="text-gray-800 font-medium">Operación: ${operacion.nombreOperacion}</p>
            <p class="text-sm text-gray-600">Fecha: ${item.fecha} - Cantidad: ${item.cantidad} unidades</p>
          </div>
          <div class="text-gray-800 font-medium">
            $${new Intl.NumberFormat('es-CO').format(item.totalGanado)} COP
          </div>
        `;
        listaDetalle.appendChild(detalleItem);
      });

      // Calcular y mostrar total general
      const totalGeneral = detalle.reduce((sum, item) => sum + (item.totalGanado || 0), 0);
      totalGeneralDetalle.textContent = `$${new Intl.NumberFormat('es-CO').format(totalGeneral)} COP`;
    }

    // Función para generar y descargar un PDF con diseño profesional
    function descargarPDF() {
      const empleado = empleadoSelect.value;
      const fechaInicio = fechaInicioDetalle.value;
      const fechaFin = fechaFinDetalle.value;

      if (!empleado || !fechaInicio || !fechaFin) {
        mostrarModalDetalle('Error', 'Por favor, selecciona un empleado y un rango de fechas.');
        return;
      }

      if (detalle.length === 0) {
        mostrarModalDetalle('Advertencia', 'No hay datos de detalle para generar el PDF. Por favor, genera el detalle primero.');
        return;
      }

      try {
        if (typeof window.jspdf === 'undefined' || typeof window.jspdf.jsPDF === 'undefined') {
          mostrarModalDetalle('Error', 'No se pudo cargar la biblioteca jsPDF. Por favor, recarga la página e intenta nuevamente.');
          console.error('Error: jsPDF no está disponible');
          return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });

        // Configuración de márgenes y estilos
        const marginLeft = 10;
        const marginTop = 10;
        let y = marginTop;

        // Título
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('RECIBO DE PRODUCCIÓN', 148.5, y, { align: 'center' });
        y += 10;

        // Información del empleado y período
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        const empleadoInfo = empleados.find(emp => emp.nombre === empleado) || { nombre: empleado, cargo: 'No especificado', documento: 'No disponible' };
        doc.text(`Empleado: ${empleadoInfo.nombre}`, marginLeft, y);
        doc.text(`Cargo: ${empleadoInfo.cargo}`, 100, y);
        doc.text(`Documento: ${empleadoInfo.documento}`, 200, y);
        y += 5;
        doc.text(`Período: ${formatearFecha(fechaInicio)} - ${formatearFecha(fechaFin)}`, marginLeft, y);
        doc.text(`Emitido el: ${formatearFecha(new Date().toISOString().split('T')[0])}`, 200, y);
        y += 10;

        // Línea divisoria
        doc.setLineWidth(0.5);
        doc.line(marginLeft, y, 287 - marginLeft, y);
        y += 5;

        // Tabla de detalle
        const tableData = [
          ['Fecha', 'Operación', 'Cantidad', 'Valor Unitario (COP)', 'Total Ganado (COP)'],
          ...detalle.map(item => {
            const operacion = operaciones.find(op => op.nombreOperacion === item.operacion) || { nombreOperacion: 'No encontrada', valorOperacion: 0 };
            return [
              item.fecha,
              operacion.nombreOperacion,
              item.cantidad,
              new Intl.NumberFormat('es-CO').format(item.valorOperacion),
              new Intl.NumberFormat('es-CO').format(item.totalGanado)
            ];
          })
        ];

        doc.autoTable({
          startY: y,
          head: [tableData[0]],
          body: tableData.slice(1),
          theme: 'grid',
          styles: {
            fontSize: 8,
            cellPadding: 1,
            overflow: 'linebreak',
            minCellHeight: 4
          },
          headStyles: {
            fillColor: [41, 128, 185],
            textColor: [255, 255, 255],
            fontStyle: 'bold',
            fontSize: 9
          },
          columnStyles: {
            0: { cellWidth: 30 }, // Fecha
            1: { cellWidth: 100 }, // Operación
            2: { cellWidth: 30 }, // Cantidad
            3: { cellWidth: 40 }, // Valor Unitario
            4: { cellWidth: 40 }  // Total Ganado
          },
          margin: { left: marginLeft, right: marginLeft },
          didDrawPage: () => {
            // Asegurar que no se agreguen páginas adicionales
            doc.setFontSize(10);
            const totalGeneral = detalle.reduce((sum, item) => sum + (item.totalGanado || 0), 0);
            const finalY = doc.lastAutoTable.finalY || y;
            if (finalY < 180) {
              doc.text(`Total General: $${new Intl.NumberFormat('es-CO').format(totalGeneral)} COP`, 287 - marginLeft, 190, { align: 'right' });
              doc.setFontSize(8);
              doc.text('Firma Empleado: ___________________________', marginLeft, 200);
              doc.text('Firma Supervisor: __________________________', 287 - marginLeft, 200, { align: 'right' });
            }
          }
        });

        // Descargar el PDF
        doc.save(`Recibo_Produccion_${empleado}_${fechaInicio}_${fechaFin}.pdf`);
        
        mostrarModalDetalle('Éxito', 'El PDF ha sido generado y descargado correctamente.');
      } catch (error) {
        console.error('Error al generar PDF:', error);
        mostrarModalDetalle('Error', `No se pudo generar el PDF: ${error.message}`);
      }
    }

    // Event Listeners
    btnGenerarDetalle.addEventListener('click', generarDetalle);
    btnDescargarPDF.addEventListener('click', descargarPDF);
    btnCancelarModalDetalle.addEventListener('click', ocultarModalDetalle);
    
    btnAnteriorDetalle.addEventListener('click', () => {
      if (paginaActual > 1) {
        cambiarPaginaDetalle(paginaActual - 1);
      }
    });
    
    btnSiguienteDetalle.addEventListener('click', () => {
      const totalPaginas = Math.ceil(detalle.length / itemsPorPagina);
      if (paginaActual < totalPaginas) {
        cambiarPaginaDetalle(paginaActual + 1);
      }
    });
    
    itemsPerPageDetalle.addEventListener('change', (e) => {
      const oldValue = e.target.oldValue || 10;
      itemsPorPagina = parseInt(e.target.value);
      const itemInicio = (paginaActual - 1) * parseInt(oldValue) + 1;
      paginaActual = Math.ceil(itemInicio / itemsPorPagina);
      paginaActual = Math.max(1, paginaActual);
      e.target.oldValue = e.target.value;
      generarDetalle();
    });

    document.addEventListener('DOMContentLoaded', () => {
      itemsPorPagina = parseInt(itemsPerPageDetalle.value);
      itemsPerPageDetalle.oldValue = itemsPerPageDetalle.value;
      
      const hoy = new Date();
      const hace15Dias = new Date(hoy);
      hace15Dias.setDate(hoy.getDate() - 15);
      fechaInicioDetalle.value = hace15Dias.toISOString().split('T')[0];
      fechaFinDetalle.value = hoy.toISOString().split('T')[0];
      
      cargarDatos();
      cargarEmpleadosDisponibles();
      
      if (typeof window.jspdf === 'undefined') {
        console.warn("Advertencia: jsPDF no está cargado correctamente. El botón de descarga de PDF podría no funcionar.");
      }
    });
  </script>
</Layout>